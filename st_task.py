# -*- coding: utf-8 -*-
"""ST TASK.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yns02PR_o-eNptz7uhujpCsupbanAfV0

Assignment: 1 Day...

Create separate stock screeners for filtering stocks based on the below condition:

Open = Low
or/and
Close = High

Open = High
or/and
Close = Low

(Should filter stocks for multiple time frames).
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import yfinance as yf
from datetime import datetime

# help(yf)

ticker_val=input("Type the ticker value for the company (Eg, AAPL for Apple)> ")

ticker=yf.Ticker(ticker_val)

print(f"Information about {ticker_val} > \n")
pd.DataFrame(ticker.info).iloc[0, 0:8]

ticker.splits

ticker.dividends

ticker.major_holders

ticker.institutional_holders

ticker.cashflow

ticker.history(period='max')

ticker.history(period='max')['Close'].plot()

ticker.history(period='6mo')['Close'].plot()

ticker.history(start="2002-10-01",end="2023-10-01")['Close'].plot()

import plotly.express as px

px.line(ticker.history(start="2002-10-01",end="2023-10-01")['Close'])

df = px.data.stocks()
fig = px.line(df, x='date', y=["MSFT","GOOG"])
fig.show()

"""Now, if you want to get all the data upto today"""

today=datetime.now().date().strftime("%Y-%m-%d")
today

px.line(ticker.history(start='2002-10-01',end=today)['Close'])

start_date = input("Enter the start date (YYYY-MM-DD): ")
end_date = input("Enter the end date (YYYY-MM-DD): ")

stock_df = yf.download(ticker_val, start=start_date, end=end_date)

stock_df

"""selecting OHLC columns"""

stock_df=stock_df[['Open','High','Low','Close']]

stock_df

"""Open = (Low/High)
or/and
Close = (High/Low)
"""

# stock_df[stock_df['']==stock_df['Low']]



"""Open = Low
or/and
Close = High

Open = High
or/and
Close = Low
"""

choice=input("Select 1 for Open=Low and Close=High \n Select 2 for Open=Low or Close=High \n Select 3 for Open=High and Close=Low \n Select 4 for Open=High or Close=Low \n Your choice >")

"""
def screener(open, low, high, close,choice):



  match choice:
    case "1":
      print("Open=Low and Close=High")
      stock_df[(stock_df['Open']==stock_df['Low']) & (stock_df['Close']==stock_df['High'])].plot()['Close']
    case "1":
      print("Open=Low or Close=High")
      stock_df[(stock_df['Open']==stock_df['Low']) | (stock_df['Close']==stock_df['High'])].plot()['Close']
    case "1":
      print("Open=High and Close=Low")
      stock_df[(stock_df['Open']==stock_df['High']) & (stock_df['Close']==stock_df['Low'])].plot()['Close']
    case "1":
      print("Open=High or Close=Low")
      stock_df[(stock_df['Open']==stock_df['High']) | (stock_df['Close']==stock_df['Low'])].plot()['Close']
"""

choice=input("Select 1 for Open=Low and Close=High \n Select 2 for Open=Low or Close=High \n Select 3 for Open=High and Close=Low \n Select 4 for Open=High or Close=Low \n Your choice >")

match choice:
  case "1":
    print("Open=Low and Close=High")
    results_df=stock_df[(stock_df['Open']==stock_df['Low']) & (stock_df['Close']==stock_df['High'])]
    # px.line(results_df)
    # plt.plot(results_df)
  case "2":
    print("Open=Low or Close=High")
    results_df=stock_df[(stock_df['Open']==stock_df['Low']) | (stock_df['Close']==stock_df['High'])]
    # px.line(results_df)
    # plt.plot(results_df)
  case "3":
    print("Open=High and Close=Low")
    results_df=stock_df[(stock_df['Open']==stock_df['High']) & (stock_df['Close']==stock_df['Low'])]
    # px.line(results_df)
    # plt.plot(results_df)
  case "4":
    print("Open=High or Close=Low")
    results_df=stock_df[(stock_df['Open']==stock_df['High']) | (stock_df['Close']==stock_df['Low'])]
    # px.line(results_df)
    # plt.plot(results_df)
  case "_":
    print("Select a valid condition")


fig=px.line(results_df)
fig.update_xaxes(range=["2019-03-01", None])
fig.show()

df2=stock_df[(stock_df['Open']==stock_df['Low']) | (stock_df['Close']==stock_df['High'])]
px.line(df2)

